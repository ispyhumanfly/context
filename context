#!/usr/bin/env perl

BEGIN {

    system 'sqlite3 context.db < context.sql'
      unless -e 'context.db';
}

use Modern::Perl;
use REST::Google::Search qw/ LOCAL /;
use Net::Google::FederatedLogin;
use DateTime::Format::SQLite;
use DateTime::Format::ISO8601;
use HTML::FormatText;
use Archive::Extract;
use Mail::Sendmail;
use File::Copy;
use File::Basename;
use Try::Tiny;
use IO::Dir;
use Encode;

use lib 'lib';
use Context::Model;

our $MODEL =
  Context::Model->connect('dbi:SQLite:context.db', {sqlite_unicode => 1});

use Mojolicious::Lite;
use Mojo::Util;
use Mojo::JSON;

plugin 'JSONConfig';

any '/' => sub {

    my $self = shift;
    
    my $redirect = app->config->{content}->{views}->{app->config->{content}->{views}->{enabled}[0]}->{url};
    return $self->redirect_to($redirect);
};

### Content Views

for my $view (@{app->config->{content}->{views}->{enabled}}) {
    if (exists app->config->{content}->{views}->{$view}) {

        ## Views
        
        get app->config->{content}->{views}->{$view}->{url} => sub {

            my $self = shift;

            my $tags = join ',',
              @{app->config->{content}->{views}->{$view}->{tags}};

            my @content = $MODEL->resultset('Content')->search(undef)->all;

            $self->{'CONTENT'} = \@content;
            $self->{'VIEW'} = $view;
            
            $self->render(app->config->{content}->{views}->{$self->{VIEW}}->{template});
        };

        post app->config->{content}->{views}->{$view}->{url} => sub {
            my $self = shift;
        };

        put app->config->{content}->{views}->{$view}->{url} => sub {
            my $self = shift;
        };

        del app->config->{content}->{views}->{$view}->{url} => sub {
            my $self = shift;
        };
    }
}

### Content Dashboard

get '/dashboard' => sub {

    my $self = shift;

    return $self->redirect_to('login') unless $self->session('admin');

    my $dtf      = $MODEL->storage->datetime_parser;
    my $dt_local = DateTime->now;

    # Content
    my @content = $MODEL->resultset('Content')->search(
        {   create_datetime => {
                -between => [
                    $dtf->format_datetime(
                        DateTime->now->subtract(days => 90)
                    ),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'CONTENT'} = \@content;

    # New Content
    my @new_content = $MODEL->resultset('Content')->search(
        {   create_datetime => {
                -between => [
                    $dtf->format_datetime(
                        DateTime->now->subtract(days => 60)
                    ),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'NEW_CONTENT'} = \@new_content;

    return $self->render('dashboard');

} => 'dashboard';

### Content Editor

get '/editor' => sub {

    my $self = shift;

    return $self->redirect_to('login') unless $self->session('admin');
    
    return $self->redirect_to('/editor?mode=create')
      unless $self->param('mode');

    # Content
    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    $self->{'CONTENT'} = $content;
        
    # Recent Updates
    my @recent_updates =
      $MODEL->resultset('Content')
      ->search(undef,
        {view => 1, rows => 25, order_by => 'modified_datetime DESC'})->all;

    $self->{'RECENT_UPDATES'} = \@recent_updates;

    return $self->render('editor');

} => 'editor';

### Context Permalink

get '/:id' => [id => qr/\d+/] => sub {

    my $self = shift;

    eval {
        $self->{CONTENT} =
          $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->single;
    };

    if ($@) {
        $self->redirect_to('/');
    }
    
    $self->render('permalink');

} => 'permalink';

### Context Authorization

get '/login' => sub {

    my $self = shift;

    return $self->redirect_to('dashboard') if $self->session('admin');

    if (app->config->{authorization}->{enabled}[0] eq 'google_apps') {

        my $domain = app->config->{authorization}->{google_apps}->{domain};

        my $claimed = $domain;

        my $google = Net::Google::FederatedLogin->new(
            claimed_id => $claimed,
            return_to  => "http://$domain/authorization"
        );
        my $auth_url = $google->get_auth_url();

        return $self->redirect_to($auth_url);
    }
    elsif (app->config->{authorization}->{enabled}[0] eq 'local_mode') {
        $self->redirect_to('/authorization');
    }

} => 'login';

any '/authorization' => sub {

    my $self = shift;

    if (app->config->{authorization}->{enabled}[0] eq 'google_apps') {

        my $domain = app->config->{domain};

        my $google = Net::Google::FederatedLogin->new(
            cgi_params => $self->req->params->to_hash,
            return_to  => "http://$domain/authorization"
        );

        my $id = $google->verify_auth();

        $self->session(admin => $id) if $id;
    }
    elsif (app->config->{authorization}->{enabled}[0] eq 'local_mode') {
        $self->session(admin => "Developer");
    }

    $self->redirect_to('dashboard');

};

get '/logout' => sub {

    my $self = shift;

    $self->session(expires => 1)
      and return $self->redirect_to('/');

} => 'logout';

### Context Forms

post '/form/content/create' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my (@tags, @cities, @types, @interests, @views, @objects);

    my $new_content =
      $MODEL->resultset('Content')
      ->create({create_datetime => DateTime->now});

    if ($self->param('author')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({author => process_text($self->param('author'))});
    }

    if ($self->param('title')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({title => process_text($self->param('title'))});
    }

    if ($self->param('body')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({body => process_text($self->param('body'))});
    }

    if ($self->param('tags')) {

        push @tags, $_ for $self->param('tags');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({tags => "@tags"});
    }

    if ($self->req->upload('objects')) {

        push @objects,
          process_photo($self->req->upload('objects'), $new_content->id);

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({objects => "@objects"})
          if scalar @objects >= 1;
    }

    if ($self->param('venue')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({venue => process_text($self->param('venue'))});
    }

    if ($self->param('address')) {

        my @results = google_local($self->param('address'));

        for (@results) {

            $MODEL->resultset('Content')->search({id => $new_content->id})
              ->update(
                {   address => $_->streetAddress . ', ' . $_->city,
                    lat     => $_->lat,
                    lng     => $_->lng
                }
              );
        }
    }

    if (($self->param('start_date')) and ($self->param('start_time'))) {

        my $start_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('start_date') . $self->param('start_time'));

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({start_datetime => $start_datetime});

    }

    if (($self->param('stop_date')) and ($self->param('stop_time'))) {

        my $stop_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('stop_date') . $self->param('stop_time'));

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({stop_datetime => $stop_datetime});

    }

    my $id = $new_content->id;
    return $self->redirect_to("/editor?mode=update&id=$id");
};

post '/form/content/update' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my (@tags, @objects);

    my $id = $self->param('id');

    my $content = $MODEL->resultset('Content')->search({id => $id})->single;

    if ($self->param('author')) {

        $content->update({author => process_text($self->param('author'))});
    }

    if ($self->param('title')) {

        $content->update({title => process_text($self->param('title'))});
    }

    if ($self->param('body')) {

        $content->update({body => process_text($self->param('body'))});
    }

    if ($self->param('tags')) {

        push @tags, $_ for $self->param('tags');
        $content->update({tags => "@tags"});
    }

    if ($self->param('address')) {

        my @results = google_local($self->param('address'));

        for (@results) {

            $MODEL->resultset('Content')->search({id => $id})->update(
                {   address => $_->streetAddress . ', ' . $_->city,
                    lat     => $_->lat,
                    lng     => $_->lng
                }
            );
        }
    }

    if ($self->param('default_object')) {

        @objects = split /\s+/, $content->objects;

        my $default = $self->param('default_photo');

        for (my $i = 0; $i <= scalar @objects; $i++) {

            undef $objects[$i] if $objects[$i] =~ m/^$default/i;
        }

        unshift @objects, $default;

        $content->update({objects => "@objects"});
    }

    if ($self->req->upload('objects')) {

        push @objects, process_photo($self->req->upload('objects'), $id);

        $content->update({objects => "@objects"})
          if scalar @objects >= 1;
    }

    $content->update({modified_datetime => DateTime->now});

    if (($self->param('start_date')) and ($self->param('start_time'))) {

        my $start_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('start_date') . $self->param('start_time'));

        $content->update({start_datetime => $start_datetime});
    }

    if (($self->param('stop_date')) and ($self->param('stop_time'))) {

        my $stop_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('stop_date') . $self->param('stop_time'));

        $content->update({stop_datetime => $stop_datetime});
    }

    return $self->redirect_to("/editor?mode=update&id=$id");

};

any '/form/content/remove' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    my @content_objects = split /\s+/, $content->objects;

    unlink "public/$_" for @content_objects;

    $content->delete;

    my $text = "Content removed!";
    return $self->redirect_to("/dashboard?message=$text");

};

post '/form/object/remove' => sub {

    my $self = shift;

    return $self->redirect_to('/') unless $self->session('admin');

    my $madness =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    my @objects = split /\s+/, $madness->objects;

    my $path = $self->param('photo');

    for (my $i = 0; $i < scalar @objects; $i++) {

        if ($objects[$i] =~ m/^$path/x) {

            undef $objects[$i] and unlink "public/$path";
        }
    }

    $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->update({objects => "@objects"})
      if scalar @objects >= 1;

};

### Context Functions

sub process_object {

    my ($upload, $id) = @_;

    my (@new_objects, @existing_objects);

    if ($upload->filename =~ m/zip$/i) {

        my $temp = app->config->{temp};

        my $zip_file = $upload->filename;
        $upload->move_to("$temp/$zip_file");

        my $archive = Archive::Extract->new(archive => "$temp/$zip_file");

        if ($archive->is_zip) {

            my $ok = $archive->extract(to => "$temp/");

            for (@{$archive->files}) {

                unless (-d "$temp/$_") {

                    if ($_ =~ m/jpg|png|gif|mp4|mp3|ogg|webm|json|xml|yaml$/i) {

                        my $checksum = Mojo::Util::md5_sum($_);
                        my $path     = "/objects/$checksum.object";

                        move "$temp/$_", "public" .$path
                          and push @new_objects, $path;
                    }
                }
            }

            return @new_objects;
        }
    }
    elsif ($upload->filename =~ m/jpg|png|gif|mp4|mp3|ogg|webm|json|xml|yaml$/i) {

        my $checksum = Mojo::Util::md5_sum($upload->filename);
        my $path     = "/objects/$checksum.img";

        $upload->move_to('public' . $path);

        push @new_objects, $path;
        return @new_objects;
    }

    return;
}

sub process_text {

    return Encode::encode(app->config->{encoding}, shift);
}

sub order_by_trending {

    my ($self, @query) = @_;
    my (%working, @results);

    for (@query) {

        if (defined $_->impressions and defined $_->clicks) {

            my $score = $_->clicks / $_->impressions;
            $working{$score} = $_;
        }
    }

    for (sort { $b <=> $a } keys %working) {
        push @results, $working{$_};
    }

    return \@results;
}

sub google_local {

    REST::Google::Search->service(LOCAL);

    my $response = REST::Google::Search->new(q => shift);

    if ($response->responseStatus == 200) {

        my $data = $response->responseData;
        return $data->results;
    }

    return;
}

### Context HTTP Server

app->log->path(app->config->{hypnotoad}->{log_file})
  if app->mode('production');
app->start();
