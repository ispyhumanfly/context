#!/usr/bin/env perl

BEGIN {

    system 'sqlite3 context.db < context.sql'
      unless -e 'context.db';
}

use Modern::Perl;
use REST::Google::Search qw/ LOCAL /;
#use Net::Google::FederatedLogin;
use DateTime::Format::SQLite;
use DateTime::Format::ISO8601;
use HTML::FormatText;
use Archive::Extract;
use Mail::Sendmail;
use File::Copy;
use File::Basename;
use Try::Tiny;
use IO::Dir;
use Encode;

use lib 'lib';
use Context::Model;

our $MODEL =
  Context::Model->connect('dbi:SQLite:context.db', {sqlite_unicode => 1});

use Mojolicious::Lite;
use Mojo::Util;
use Mojo::JSON;

plugin 'JSONConfig';

## Adding Template Directories
#
#my $renderer = Mojolicious::Renderer->new;
#
#push @{$renderer->paths}, 'templates/context';
#push @{$renderer->paths}, 'templates/dirtybarfly';

any '/' => sub {

    my $self = shift;
    
    my $redirect = app->config->{content}->{views}->{app->config->{content}->{views}->{enabled}[0]}->{url};
    return $self->redirect_to($redirect);
};

### Content

for my $view (@{app->config->{content}->{views}->{enabled}}) {
    if (exists app->config->{content}->{views}->{$view}) {

        ## Views
        
        get app->config->{content}->{views}->{$view}->{url} => sub {

            my $self = shift;

            my $tags = join ',',
              @{app->config->{content}->{views}->{$view}->{tags}};

            my @content = $MODEL->resultset('Content')->search(
                {tags => {like => '%$tags%'}},
                {   order_by =>
                      app->config->{content}->{views}->{$view}->{order_by}
                }
            )->all;

            $self->{'CONTENT'} = \@content;
            $self->{VIEW} = $view;
            
            $self->render('content');
        };

        post app->config->{content}->{views}->{$view}->{url} => sub {
            my $self = shift;
        };

        put app->config->{content}->{views}->{$view}->{url} => sub {
            my $self = shift;
        };

        del app->config->{content}->{views}->{$view}->{url} => sub {
            my $self = shift;
        };
    }
}

### Extensions

for my $extension (@{app->config->{extensions}->{enabled}}) {
    if (exists app->config->{extensions}->{$extension}) {
        
        ## Extension

        if (-e "templates/extensions/$extension") {

            require "templates/extensions/$extension/$extension.pl"
              if -e "templates/extensions/$extension/$extension.pl";
        }
    }
}

### Permalink

get '/:id' => [id => qr/\d+/] => sub {

    my $self = shift;

    my $content = '';

    eval {
        $content =
          $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->single;
    };

    if ($@) {
        $self->redirect_to('/');
    }

    if (app->config->{permalink}->{enabled} eq 'true') {

        for my $route (keys %{app->config->{permalink}->{routes}}) {

            my $match = 0;

            for my $type (
                @{app->config->{permalink}->{routes}->{$route}->{types}})
            {

                $match = 0 unless $content->types =~ m/$type/g;
                $match = 1 if $content->types =~ m/$type/g;
            }

            for my $tag (
                @{app->config->{permalink}->{routes}->{$route}->{tags}})
            {

                $match = 0 unless $content->tags =~ m/$tag/g;
                $match = 1 if $content->tags =~ m/$tag/g;
            }

            for my $city (
                @{app->config->{permalink}->{routes}->{$route}->{cities}})
            {

                $match = 0 unless $content->cities =~ m/$city/g;
                $match = 1 if $content->cities =~ m/$city/g;
            }

            for my $interest (
                @{app->config->{permalink}->{routes}->{$route}->{interests}})
            {

                $match = 0 unless $content->interests =~ m/$interest/g;
                $match = 1 if $content->interests =~ m/$interest/g;
            }

            for my $view (
                @{app->config->{permalink}->{routes}->{$route}->{views}})
            {

                $match = 0 unless $content->views =~ m/$view/g;
                $match = 1 if $content->views =~ m/$view/g;
            }

            my $redirect =
              app->config->{permalink}->{routes}->{$route}->{redirect};

            if ($match) {
                $self->redirect_to($redirect . '?id=' . $content->id);
            }
        }
    }

} => 'permalink';

### Authorization

get '/login' => sub {

    my $self = shift;

    return $self->redirect_to('dashboard') if $self->session('admin');

    if (app->config->{authorization}->{enabled}[0] eq 'google_apps') {

        my $domain = app->config->{authorization}->{google_apps}->{domain};

        my $claimed = $domain;

        my $google = Net::Google::FederatedLogin->new(
            claimed_id => $claimed,
            return_to  => "http://$domain/authorization"
        );
        my $auth_url = $google->get_auth_url();

        return $self->redirect_to($auth_url);
    }
    elsif (app->config->{authorization}->{enabled}[0] eq 'local_mode') {
        $self->redirect_to('/authorization');
    }

} => 'login';

any '/authorization' => sub {

    my $self = shift;

    if (app->config->{authorization}->{google_apps}->{enabled}[0] eq 'google_apps') {

        my $domain = app->config->{domain};

        my $google = Net::Google::FederatedLogin->new(
            cgi_params => $self->req->params->to_hash,
            return_to  => "http://$domain/authorization"
        );

        my $id = $google->verify_auth();

        $self->session(admin => $id) if $id;
    }
    elsif (app->config->{authorization}->{local_mode}->{enabled}[0] eq 'local_mode') {
        $self->session(admin => "Developer");
    }

    $self->redirect_to('dashboard');

};

get '/logout' => sub {

    my $self = shift;

    $self->session(expires => 1)
      and return $self->redirect_to('/');

} => 'logout';

### Dashboard

get '/dashboard' => sub {

    my $self = shift;

    return $self->redirect_to('login') unless $self->session('admin');

    return $self->redirect_to('/editor?mode=create')
      unless $self->param('mode');

    # Content
    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    $self->{'CONTENT'} = $content;

    # Recent Updates
    my @recent_updates =
      $MODEL->resultset('Content')
      ->search(undef,
        {page => 1, rows => 25, order_by => 'modified_datetime DESC'})->all;

    $self->{'RECENT_UPDATES'} = \@recent_updates;

    return $self->render('dashboard');

} => 'dashboard';

### Forms

post '/form/content/create' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my (@tags, @cities, @types, @interests, @views, @photos);

    my $new_content =
      $MODEL->resultset('Content')
      ->create({create_datetime => DateTime->now});

    if ($self->param('author')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({author => encode_string($self->param('author'))});
    }

    if ($self->param('title')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({title => encode_string($self->param('title'))});
    }

    if ($self->param('body')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({body => encode_string($self->param('body'))});
    }

    if ($self->param('tags')) {

        push @tags, $_ for $self->param('tags');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({tags => "@tags"});
    }

    if ($self->param('cities')) {

        push @cities, $_ for $self->param('cities');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({cities => "@cities"});
    }

    if ($self->param('link')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({link => $self->param('link')});
    }

    if ($self->param('address')) {

        my @results = google_local($self->param('address'));

        for (@results) {

            $MODEL->resultset('Content')->search({id => $new_content->id})
              ->update(
                {   address => $_->streetAddress . ', ' . $_->city,
                    lat     => $_->lat,
                    lng     => $_->lng
                }
              );
        }
    }

    if ($self->param('venue')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({venue => encode_string($self->param('venue'))});
    }

    if ($self->req->upload('photos')) {

        push @photos,
          process_photo($self->req->upload('photos'), $new_content->id);

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({photos => "@photos"})
          if scalar @photos >= 1;
    }


    if (($self->param('start_date')) and ($self->param('start_time'))) {

        my $start_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('start_date') . $self->param('start_time'));

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({start_datetime => $start_datetime});

    }

    if (($self->param('stop_date')) and ($self->param('stop_time'))) {

        my $stop_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('stop_date') . $self->param('stop_time'));

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({stop_datetime => $stop_datetime});

    }

    my $id = $new_content->id;

    my $text =

      'Content successfully created.'
      . "<a href='/$id'>Click here to view the Content page.</a>";

    return $self->redirect_to("/editor?mode=update&id=$id&message=$text");
};

post '/form/content/update' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my (@tags, @photos);

    my $id = $self->param('id');

    my $content = $MODEL->resultset('Content')->search({id => $id})->single;

    if ($self->param('author')) {

        $content->update({author => encode_string($self->param('author'))});
    }

    if ($self->param('title')) {

        $content->update({title => encode_string($self->param('title'))});
    }

    if ($self->param('body')) {

        $content->update({body => encode_string($self->param('body'))});
    }

    if ($self->param('tags')) {

        push @tags, $_ for $self->param('tags');
        $content->update({tags => "@tags"});
    }

    if ($self->param('link')) {

        $MODEL->resultset('Content')->search({id => $id})
          ->update({link => $self->param('link')});
    }

    if ($self->param('address')) {

        my @results = google_local($self->param('address'));

        for (@results) {

            $MODEL->resultset('Content')->search({id => $id})->update(
                {   address => $_->streetAddress . ', ' . $_->city,
                    lat     => $_->lat,
                    lng     => $_->lng
                }
            );
        }
    }

    if ($self->param('venue')) {

        $content->update({venue => encode_string($self->param('venue'))});
    }

    if ($self->param('default_photo')) {

        @photos = split /\s+/, $content->photos;

        my $default = $self->param('default_photo');

        for (my $i = 0; $i <= scalar @photos; $i++) {

            undef $photos[$i] if $photos[$i] =~ m/^$default/i;
        }

        unshift @photos, $default;

        $content->update({photos => "@photos"});
    }

    if ($self->req->upload('photos')) {

        push @photos, process_photo($self->req->upload('photos'), $id);

        $content->update({photos => "@photos"})
          if scalar @photos >= 1;
    }

    $content->update({modified_datetime => DateTime->now});

    if (($self->param('start_date')) and ($self->param('start_time'))) {

        my $start_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('start_date') . $self->param('start_time'));

        $content->update({start_datetime => $start_datetime});
    }

    if (($self->param('stop_date')) and ($self->param('stop_time'))) {

        my $stop_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('stop_date') . $self->param('stop_time'));

        $content->update({stop_datetime => $stop_datetime});
    }

    my $text =

      'Content updated. '
      . "<a href='/$id'>You can click here to view the Content page.</a>";

    return $self->redirect_to("/editor?mode=update&id=$id&message=$text");

};

any '/form/content/remove' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    my @content_photos = split /\s+/, $content->photos;

    unlink "public/$_" for @content_photos;

    $content->delete;

    my $text = "Content removed!";
    return $self->redirect_to("/dashboard?message=$text");

};

post '/form/photo/remove' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my $photo_madness =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    my @photos = split /\s+/, $photo_madness->photos;

    my $path = $self->param('photo');

    for (my $i = 0; $i < scalar @photos; $i++) {

        if ($photos[$i] =~ m/^$path/x) {

            undef $photos[$i] and unlink "public/$path";
        }
    }

    $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->update({photos => "@photos"})
      if scalar @photos >= 1;

};

## Context Content Trending

post '/trending/:type' => [type => qr/\w+/] => sub {

    my $self = shift;

    if ($self->param('id')) {

        my $content =
          $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->single;

        given ($self->param('type')) {

            when ('impressions') {

                $content->update({impressions => $content->impressions + 1});
            }

            when ('clicks') {

                $content->update({clicks => $content->clicks + 1});
            }

            default {

                $content->close;
            }
        }
    }

    return;
};

### Context Tools

sub process_photo {

    my ($upload, $id) = @_;

    my (@new_photos, @existing_photos);

    if ($upload->filename =~ m/zip$/i) {

        my $temp = app->config->{temp};

        my $zip_file = $upload->filename;
        $upload->move_to("$temp/$zip_file");

        my $archive = Archive::Extract->new(archive => "$temp/$zip_file");

        if ($archive->is_zip) {

            my $ok = $archive->extract(to => "$temp/");

            for (@{$archive->files}) {

                unless (-d "$temp/$_") {

                    if ($_ =~ m/jpg|png|gif$/i) {

                        my $checksum = Mojo::Util::md5_sum($_);
                        my $path     = "/photos/$checksum.img";

                        move "$temp/$_", "public/$path"
                          and push @new_photos, $path;

                    }
                }
            }

            return @new_photos;
        }
    }
    elsif ($upload->filename =~ m/jpg|png|gif$/i) {

        my $checksum = Mojo::Util::md5_sum($upload->filename);
        my $path     = "/photos/$checksum.img";

        $upload->move_to('public' . $path);

        push @new_photos, $path;
        return @new_photos;
    }

    return;
}

sub google_local {

    REST::Google::Search->service(LOCAL);

    my $response = REST::Google::Search->new(q => shift);

    if ($response->responseStatus == 200) {

        my $data = $response->responseData;
        return $data->results;
    }

    return;
}

sub encode_string {

    return Encode::encode(app->config->{encoding}, shift);
}

sub order_by_trending {

    my ($self, @query) = @_;
    my (%working, @results);

    for (@query) {

        if (defined $_->impressions and defined $_->clicks) {

            my $score = $_->clicks / $_->impressions;
            $working{$score} = $_;
        }
    }

    for (sort { $b <=> $a } keys %working) {
        push @results, $working{$_};
    }

    return \@results;
}

app->log->path(app->config->{hypnotoad}->{log_file})
  if app->mode('production');

#app->secret('Something sticky in the basement.');
app->start();
