#!/usr/bin/env perl

BEGIN {

    system 'sqlite3 after5.db < after5.sql'
      unless -e 'after5.db';
}

use Modern::Perl;
use REST::Google::Search qw/ LOCAL /;
use Net::Google::FederatedLogin;
use DateTime::Format::SQLite;
use DateTime::Format::ISO8601;
use HTML::FormatText;
use Archive::Extract;
use Mail::Sendmail;
use File::Copy;
use Try::Tiny;
use IO::Dir;
use Encode;

use lib 'lib';
use After5::Model;

our $MODEL = After5::Model->connect('dbi:SQLite:after5.db');

use Mojolicious::Lite;
use Mojo::Util;
use Mojo::JSON;

plugin 'JSONConfig';

any '/' => sub {

    my $self = shift;
    return $self->redirect_to('home');
};

any '/a5' => sub {

    my $self = shift;
    return $self->redirect_to('home');
};

### After 5 Visitor Pages

## Home

get '/home' => sub {

    my $self = shift;

    my $dtf = $MODEL->storage->datetime_parser;
    my $dt_local;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%home%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%home%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Articles
    my @articles = $MODEL->resultset('Content')->search(
        {   types           => {like => '%article%'},
            create_datetime => {
                -between => [
                    $dtf->format_datetime(
                        DateTime->now->subtract(days => 90)
                    ),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'ARTICLES'} = \@articles;

    # Events
    my @events = $MODEL->resultset('Content')->search(
        {   types          => {like => '%event%'},
            start_datetime => {
                -between => [
                    $dtf->format_datetime(DateTime->now),
                    $dtf->format_datetime(DateTime->now->add(days => 90))
                ]
            }
        },
        {order_by => 'start_datetime ASC'}
    )->all;

    $self->{'EVENTS'} = \@events;

    # Galleries
    my @galleries = $MODEL->resultset('Content')->search(
        {   types           => {like => '%gallery%'},
            create_datetime => {
                -between => [
                    $dtf->format_datetime(
                        DateTime->now->subtract(days => 90)
                    ),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'GALLERIES'} = \@galleries;

    # Trending
    my @trending;

    push @trending, @articles;
    push @trending, @events;
    push @trending, @galleries;

    $self->{'TRENDING'} = order_by_trending($self, @trending);

    return $self->render('home');

} => 'home';

## Articles

get '/articles' => sub {

    my $self = shift;

    my $dtf = $MODEL->storage->datetime_parser;
    my $dt_local;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%articles%'}, types => {like => '%ad_header%'}})
      ->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%articles%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Articles
    if ($self->param('create_datetime')) {

        $dt_local =
          DateTime->from_epoch(epoch => int($self->param('create_datetime')));
    }
    else {
        $dt_local = DateTime->now;
    }

    my @articles = $MODEL->resultset('Content')->search(
        {   pages           => {like => '%articles%'},
            types           => {like => '%article%'},
            create_datetime => {
                -between => [
                    $dtf->format_datetime($dt_local->subtract(days => 90)),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'ARTICLES'} = \@articles;

    # Trending
    my @trending = $MODEL->resultset('Content')->search(
        {   pages           => {like => '%articles%'},
            types           => {like => '%article%'},
            create_datetime => {
                -between => [
                    $dtf->format_datetime($dt_local),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'TRENDING'} = order_by_trending($self, @trending);

    return $self->render('articles');

} => 'articles';

## Events

get '/events' => sub {

    my $self = shift;

    my $dtf = $MODEL->storage->datetime_parser;
    my $dt_local;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%events%'}, types => {like => '%ad_header%'}})
      ->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%events%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Events
    if ($self->param('start_datetime')) {

        $dt_local =
          DateTime->from_epoch(epoch => int($self->param('start_datetime')));
    }
    else {
        $dt_local = DateTime->now;
    }

    my @events = $MODEL->resultset('Content')->search(
        {   pages          => {like => '%events%'},
            types          => {like => '%event%'},
            start_datetime => {
                -between => [
                    $dtf->format_datetime($dt_local),
                    $dtf->format_datetime($dt_local->add(days => 90))
                ]
            }
        },
        {order_by => 'start_datetime ASC'}
    )->all;

    $self->{'EVENTS'} = \@events;

    # Trending
    my @trending = $MODEL->resultset('Content')->search(
        {   pages          => {like => '%events%'},
            types          => {like => '%event%'},
            start_datetime => {
                -between => [
                    $dtf->format_datetime(DateTime->now),
                    $dtf->format_datetime(DateTime->now->add(days => 30))
                ]
            }
        },
        {order_by => 'start_datetime ASC'}
    )->all;

    $self->{'TRENDING'} = order_by_trending($self, @trending);

    return $self->render('events');

} => 'events';

## Networking

get '/networking' => sub {

    my $self = shift;

    my $dtf = $MODEL->storage->datetime_parser;
    my $dt_local;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%networking%'}, types => {like => '%ad_header%'}})
      ->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%networking%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Events
    if ($self->param('start_datetime')) {

        $dt_local =
          DateTime->from_epoch(epoch => int($self->param('start_datetime')));
    }
    else {
        $dt_local = DateTime->now;
    }

    ## TODO: Change this over to @events and get rid of the @upcoming naming.

    my @upcoming_events = $MODEL->resultset('Content')->search(
        {   pages          => {like => '%networking%'},
            types          => {like => '%event%'},
            tags           => {like => '%networking%'},
            start_datetime => {
                -between => [
                    $dtf->format_datetime($dt_local),
                    $dtf->format_datetime($dt_local->add(days => 120))
                ]
            }
        },
        {order_by => 'start_datetime ASC'}
    )->all;

    $self->{'UPCOMING_EVENTS'} = \@upcoming_events;

    # Trending
    my @trending = $MODEL->resultset('Content')->search(
        {   pages          => {like => '%networking%'},
            types          => {like => '%event%'},
            tags           => {like => '%networking%'},
            start_datetime => {
                -between => [
                    $dtf->format_datetime(DateTime->now),
                    $dtf->format_datetime(DateTime->now->add(days => 90))
                ]
            }
        },
        {order_by => 'start_datetime ASC'}
    )->all;

    $self->{'TRENDING'} = order_by_trending($self, @trending);

    return $self->render('networking');

} => 'networking';

## Style

get '/style' => sub {

    my $self = shift;

    my $dtf = $MODEL->storage->datetime_parser;
    my $dt_local;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%style%'}, types => {like => '%ad_header%'}})
      ->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%style%'}, types => {like => '%ad_block%'}})->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Articles
    if ($self->param('create_datetime')) {

        $dt_local =
          DateTime->from_epoch(epoch => int($self->param('create_datetime')));
    }
    else {
        $dt_local = DateTime->now;
    }

    my @articles = $MODEL->resultset('Content')->search(
        {   pages           => {like => '%style%'},
            types           => {like => '%article%'},
            create_datetime => {
                -between => [
                    $dtf->format_datetime($dt_local->subtract(days => 90)),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'ARTICLES'} = \@articles;

    # Trending
    my @trending = $MODEL->resultset('Content')->search(
        {   pages           => {like => '%style%'},
            types           => {like => '%article%'},
            create_datetime => {
                -between => [
                    $dtf->format_datetime($dt_local),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'TRENDING'} = order_by_trending($self, @trending);

    return $self->render('style');

} => 'style';

get '/photos' => sub {

    my $self = shift;

    my $dtf = $MODEL->storage->datetime_parser;
    my $dt_local;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%photos%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%photos%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Galleries
    my @galleries = $MODEL->resultset('Content')->search(
        {   pages           => {like => '%photos%'},
            types           => {like => '%gallery%'},
            create_datetime => {
                -between => [
                    $dtf->format_datetime(
                        DateTime->now->subtract(days => 120)
                    ),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'GALLERIES'} = \@galleries;

    # Trending
    $self->{'TRENDING'} = order_by_trending($self, @galleries);

    return $self->render('photos');

} => 'photos';

## Live

get '/live/:city' => [city => qr/\w+/] => sub {

    my $self = shift;

    my $city = lc($self->param('city'));
    $city = lc($city);
    $city =~ s/ /_/g;

    # Ads
    my @ads = $MODEL->resultset('Content')->search(
        {   pages => {like => '%live%'},
            types => {like => '%ad_header%'}
        }
    )->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block = $MODEL->resultset('Content')->search(
        {   pages => {like => '%live%'},
            types => {like => '%ad_block%'}
        }
    )->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # City Life
    my @city_life = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            cities => {like => $city},
            tags   => {like => "%city_life%"}
        },
        {order_by => 'id DESC'}
    )->all;

    $self->{'CITY_LIFE'} = \@city_life;

    # Featured Lifestyle
    my @featured_lifestyle = $MODEL->resultset('Content')->search(
        {   pages    => {like => '%live%'},
            types    => {like => '%place%'},
            cities   => {like => $city},
            position => 1
        },
        {order_by => 'id DESC'}
    )->all;

    $self->{'FEATURED_LIFESTYLE'} = \@featured_lifestyle;

    # Neighbors
    my @neighbors = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            types  => {like => '%article%'},
            tags   => {like => '%neighbor%'},
            cities => {like => $city}
        },
        {page => 1, rows => 3, order_by => 'id DESC'}
    )->all;

    $self->{'NEIGHBORS'} = \@neighbors;


} => 'live';

get '/live/:city/neighbors' => [city => qr/\w+/] => sub {

    my $self = shift;

    my $city = $self->param('city');

    unless ($self->param('id')) {

        my $first = $MODEL->resultset('Content')->search(
            {   pages  => {like => '%live%'},
                cities => {like => "%$city%"},
                tags   => {like => '%neighbor%'}
            },
            {order_by => 'id DESC'}
        )->first;
        return $self->redirect_to("/live/$city/neighbors?id=" . $first->id);
    }

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%live%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%live%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Neighbors / More Neighbors
    my @neighbors = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            cities => {like => "%$city%"},
            tags   => {like => '%neighbor%'}
        },
        {order_by => 'id DESC'}
    )->all;

    $self->{'NEIGHBORS'} = \@neighbors;

    return $self->render('neighbors');

} => 'neighbors';

## Work

get '/work' => sub {

    my $self = shift;

    return $self->redirect_to('/work?tags=job_listings')
      unless $self->param('tags');

    my $dtf      = $MODEL->storage->datetime_parser;
    my $dt_local = DateTime->now;

    my (@ads, @ads_block);

    if ($self->param('tags') eq 'career_tips') {

        # Ads
        my @ads = $MODEL->resultset('Content')->search(
            {   title => {like => '%walsh%'},
                types => {like => '%ad_header%'}
            }
        )->all;

        $self->{'ADS'} = \@ads;

        # Ads Block
        my @ads_block = $MODEL->resultset('Content')->search(
            {   title => {like => '%walsh%'},
                types => {like => '%ad_block%'}
            }
        )->all;

        $self->{'ADS_BLOCK'} = \@ads_block;

    }
    else {

        # Ads
        my @ads =
          $MODEL->resultset('Content')
          ->search(
            {pages => {like => '%work%'}, types => {like => '%ad_header%'}})
          ->all;

        $self->{'ADS'} = \@ads;

        # Ads Block
        my @ads_block =
          $MODEL->resultset('Content')
          ->search(
            {pages => {like => '%work%'}, types => {like => '%ad_block%'}})
          ->all;

        $self->{'ADS_BLOCK'} = \@ads_block;

    }

    # Work
    if ($self->param('tags')) {

        my $tags = $self->param('tags');

        my @work = $MODEL->resultset('Content')->search(
            {pages => {like => '%work%'}, tags => {like => "%$tags%"}},
            {order_by => 'id DESC'},
        )->all;

        $self->{'WORK'} = \@work;
    }

    my @networking = $MODEL->resultset('Content')->search(
        {   pages          => {like => '%work%'},
            types          => {like => '%event%'},
            tags           => {like => '%networking%'},
            start_datetime => {
                -between => [
                    $dtf->format_datetime($dt_local),
                    $dtf->format_datetime($dt_local->add(days => 90))
                ]
            }
        },
        {order_by => 'start_datetime ASC'}
    )->all;

    $self->{'NETWORKING'} = \@networking;

    return $self->render('work');

} => 'work';


## About

get '/about' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%about%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%about%'}, types => {like => '%ad_block%'}})->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Staff
    my @staff = $MODEL->resultset('Content')->search(
        {   pages => {like => '%about'},
            tags  => {like => '%after5_staff%'}
        },
        {order_by => 'position ASC'}
    )->all;

    $self->{'STAFF'} = \@staff;

    # Press
    my @press = $MODEL->resultset('Content')->search(
        {   pages => {like => '%about'},
            tags  => {like => '%after5_press%'}
        },
        {order_by => 'id DESC'}
    )->all;

    $self->{'PRESS'} = \@press;

    $self->{'STOCK_PHOTO'} = stock_photo();

    return $self->render('about');

} => 'about';

## Contact

get '/contact' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%about%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%about%'}, types => {like => '%ad_block%'}})->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    $self->{'STOCK_PHOTO'} = stock_photo();

    return $self->render('contact');

} => 'contact';

## Newsletter

get '/newsletter' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%about%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%about%'}, types => {like => '%ad_block%'}})->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    $self->{'STOCK_PHOTO'} = stock_photo();

    return $self->render('newsletter');

} => 'newsletter';

## Search

get '/search' => sub {

    my $self = shift;

    my $dtf      = $MODEL->storage->datetime_parser;
    my $dt_local = DateTime->now;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%search%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%search%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Search Results

    my @search_results;

    if ($self->param('types') eq 'event') {

        @search_results = $MODEL->resultset('Content')->search(
            {   types          => {like => '%event%'},
                start_datetime => {
                    -between => [
                        $dtf->format_datetime($dt_local),
                        $dtf->format_datetime($dt_local->add(days => 120))
                    ]
                }
            },
            {order_by => 'start_datetime ASC'}
        )->all;

    }
    else {

        @search_results =
          $MODEL->resultset('Content')
          ->search(undef, {order_by => 'id DESC'})->all;
    }

    $self->{'SEARCH_RESULTS'} = \@search_results;

    # Trending
    if ($self->param('trending') eq 'true') {

        $self->{'SEARCH_RESULTS'} = order_by_trending($self, @search_results);

    }
    else {
        $self->{'SEARCH_RESULTS'} = \@search_results;
    }

    return $self->render('search');

} => 'search';

## Permalink

get '/:id' => [id => qr/\d+/] => sub {

    my $self = shift;

    my $dtf      = $MODEL->storage->datetime_parser;
    my $dt_local = DateTime->now;

    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    if ($content->create_datetime->epoch > $dt_local->subtract(days => app->config->{old_content})->epoch) {

        # Neighbors
        if ($content->tags =~ m/\bneighbor/g) {
            $self->render('permalink');
        }
    
        # Articles
        elsif ($content->types =~ m/article/g) {
    
            return $self->redirect_to('/style?create_datetime='
                  . $content->create_datetime->epoch . '&id='
                  . $content->id)
              if $content->tags =~ m/\bstyle\b/g;
    
            return $self->redirect_to('/articles?create_datetime='
                  . $content->create_datetime->epoch . '&id='
                  . $content->id)
              if $content->tags =~ m/\bpeople|place|article|general\b/g;
        }
    
        # Events
        elsif ($content->types =~ m/event/g) {
    
            return $self->redirect_to('/networking?start_datetime='
                  . $content->start_datetime->epoch . '&id='
                  . $content->id)
              if $content->tags =~ m/\bnetworking\b/g;
    
            return $self->redirect_to('/events?start_datetime='
                  . $content->start_datetime->epoch . '&id='
                  . $content->id);
        }
    
        # Photo Galleries
        elsif ($content->types =~ m/\bgallery/g) {
    
            return $self->redirect_to('/photos?id=' . $content->id);
        }

        
    }
    
    # Ads
    my @ads = $MODEL->resultset('Content')->search(
        {pages => {like => '%permalink%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'}
    )->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%permalink%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    $self->{'CONTENT'} = $content;
    return $self->render('permalink');

} => 'permalink';

get '/:img' => [img => qr/\w+.img/] => sub {

    my $self = shift;

    my $img = $self->param('img');

    my $content =
      $MODEL->resultset('Content')->search({photos => {like => "%$img%"}})
      ->first;

    my $photo_index;

    for (split /\s+/, $content->photos) {

        $photo_index++;

        if ($_ =~ m/\b$img/) {

            return $self->redirect_to(
                '/gallery/' . $content->id . '/' . $photo_index);
        }
    }

    return $self->render('not_found');
};

get '/gallery/:id/:index' => [id => qr/\d+/, index => qr/\d+/] => sub {

    my $self = shift;

    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    push @{$self->{'PHOTOS'}}, $_ for split /\s+/, $content->photos;

    # Ads
    my @ads = $MODEL->resultset('Content')
      ->search({types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    $self->{CONTENT} = $content;

    return $self->render('gallery');

} => 'gallery';

### After 5 Admin Pages

get '/login' => sub {

    my $self = shift;

    my $domain = app->config->{domain};

    ## TODO: This doesn't actually work :(

    if (not app->mode('production')) {
        $self->session(admin => 'development');
    }
    else {
        $self->session(admin => 'development');
    }

    return $self->redirect_to('dashboard') if $self->session('admin');

    my $claimed = $domain;

    my $google = Net::Google::FederatedLogin->new(
        claimed_id => $claimed,
        return_to  => "https://$domain/api/login"
    );
    my $auth_url = $google->get_auth_url();

    return $self->redirect_to($auth_url);

} => 'login';

get '/logout' => sub {

    my $self = shift;

    $self->session(expires => 1)
      and return $self->redirect_to('home');

} => 'logout';

get '/dashboard' => sub {

    my $self = shift;

    return $self->redirect_to('login') unless $self->session('admin');

    my $dtf      = $MODEL->storage->datetime_parser;
    my $dt_local = DateTime->now;

    # Content
    my @content = $MODEL->resultset('Content')->search(
        {   create_datetime => {
                -between => [
                    $dtf->format_datetime(
                        DateTime->now->subtract(days => 90)
                    ),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'CONTENT'} = \@content;

    # New Content
    my @new_content = $MODEL->resultset('Content')->search(
        {   create_datetime => {
                -between => [
                    $dtf->format_datetime(
                        DateTime->now->subtract(days => 60)
                    ),
                    $dtf->format_datetime(DateTime->now)
                ]
            }
        },
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'NEW_CONTENT'} = \@new_content;

    # Ads

    my (@ads, @ads_header, @ads_block);

    @ads_header = $MODEL->resultset('Content')
      ->search({types => {like => '%ad_header%'}})->all;
    @ads_block =
      $MODEL->resultset('Content')->search({types => {like => '%ad_block%'}})
      ->all;

    push @ads, (@ads_header, @ads_block);

    $self->{'ADS_DASHBOARD'} = order_by_trending($self, @ads);

    # Newsletter
    my @newsletter = $MODEL->resultset('Content')->search(
        {types    => {like => '%newsletter%'}},
        {order_by => 'create_datetime DESC'}
    )->all;

    $self->{'NEWSLETTER'} = \@newsletter;

    return $self->render('dashboard');

} => 'dashboard';

get '/editor' => sub {

    my $self = shift;

    return $self->redirect_to('login') unless $self->session('admin');
    return $self->redirect_to('/editor?mode=create')
      unless $self->param('mode');

    # Content
    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    $self->{'CONTENT'} = $content;

    # Recent Updates
    my @recent_updates =
      $MODEL->resultset('Content')
      ->search(undef,
        {page => 1, rows => 25, order_by => 'modified_datetime DESC'})->all;

    $self->{'RECENT_UPDATES'} = \@recent_updates;

    return $self->render('editor');

} => 'editor';

### After 5 Form API

any '/api/login' => sub {

    my $self = shift;

    my $domain = app->config->{domain};

    my $google = Net::Google::FederatedLogin->new(
        cgi_params => $self->req->params->to_hash,
        return_to  => "https://$domain/api/login"
    );

    my $id = $google->verify_auth();

    $self->session(admin => $id) if $id;

    $self->redirect_to('dashboard');

};

post '/api/logout' => sub {

    my $self = shift;

    $self->session(expires => 1)
      and return $self->redirect_to('home');

};

post '/api/content/create' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my (@tags, @cities, @types, @interests, @pages, @photos);

    my $new_content =
      $MODEL->resultset('Content')
      ->create({create_datetime => DateTime->now});

    if (($self->param('start_date')) and ($self->param('start_time'))) {

        my $start_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('start_date') . $self->param('start_time'));

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({start_datetime => $start_datetime});

    }

    if (($self->param('stop_date')) and ($self->param('stop_time'))) {

        my $stop_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('stop_date') . $self->param('stop_time'));

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({stop_datetime => $stop_datetime});

    }

    if ($self->param('author')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({author => encode_string($self->param('author'))});
    }

    if ($self->param('title')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({title => encode_string($self->param('title'))});
    }

    if ($self->param('body')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({body => encode_string($self->param('body'))});
    }

    if ($self->param('interests')) {

        push @interests, $_ for $self->param('interests');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({interests => "@interests"});
    }

    if ($self->param('pages')) {

        push @pages, $_ for $self->param('pages');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({pages => "@pages"});
    }

    if ($self->param('types')) {

        push @types, $_ for $self->param('types');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({types => "@types"});
    }

    if ($self->param('tags')) {

        push @tags, $_ for $self->param('tags');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({tags => "@tags"});
    }

    if ($self->param('cities')) {

        push @cities, $_ for $self->param('cities');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({cities => "@cities"});
    }

    if ($self->param('position')) {

        my $position = int($self->param('position'));

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({position => $position});
    }

    if ($self->param('link')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({link => $self->param('link')});
    }

    if ($self->param('address')) {

        my @results = google_local($self->param('address'));

        for (@results) {

            $MODEL->resultset('Content')->search({id => $new_content->id})
              ->update(
                {   address => $_->streetAddress . ', ' . $_->city,
                    lat     => $_->lat,
                    lng     => $_->lng
                }
              );
        }
    }

    if ($self->param('venue')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({venue => encode_string($self->param('venue'))});
    }

    if ($self->req->upload('photos')) {

        push @photos,
          process_photo($self->req->upload('photos'), $new_content->id);

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({photos => "@photos"})
          if scalar @photos >= 1;
    }

    my $id = $new_content->id;

    my $text =

      'Content successfully created.'
      . "<a href='/$id'>Click here to view the Permalink page.</a>";

    return $self->redirect_to("/editor?mode=update&id=$id&message=$text");
};

post '/api/content/update' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my (@tags, @cities, @types, @interests, @pages, @photos);

    my $id = $self->param('id');

    my $content = $MODEL->resultset('Content')->search({id => $id})->single;

    if (($self->param('start_date')) and ($self->param('start_time'))) {

        my $start_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('start_date') . $self->param('start_time'));

        $content->update({start_datetime => $start_datetime});
    }

    if (($self->param('stop_date')) and ($self->param('stop_time'))) {

        my $stop_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('stop_date') . $self->param('stop_time'));

        $content->update({stop_datetime => $stop_datetime});
    }

    if ($self->param('author')) {

        $content->update({author => encode_string($self->param('author'))});
    }

    if ($self->param('title')) {

        $content->update({title => encode_string($self->param('title'))});
    }

    if ($self->param('body')) {

        $content->update({body => encode_string($self->param('body'))});
    }

    if ($self->param('interests')) {

        push @interests, $_ for $self->param('interests');
        $content->update({interests => "@interests"});
    }

    if ($self->param('pages')) {

        push @pages, $_ for $self->param('pages');
        $content->update({pages => "@pages"});
    }

    if ($self->param('types')) {

        push @types, $_ for $self->param('types');
        $content->update({types => "@types"});
    }

    if ($self->param('tags')) {

        push @tags, $_ for $self->param('tags');
        $content->update({tags => "@tags"});
    }

    if ($self->param('cities')) {

        push @cities, $_ for $self->param('cities');

        $MODEL->resultset('Content')->search({id => $id})
          ->update({cities => "@cities"});
    }

    if ($self->param('position')) {

        my $position = int($self->param('position'));

        $MODEL->resultset('Content')->search({id => $id})
          ->update({position => $position});
    }

    if ($self->param('link')) {

        $MODEL->resultset('Content')->search({id => $id})
          ->update({link => $self->param('link')});
    }

    if ($self->param('address')) {

        my @results = google_local($self->param('address'));

        for (@results) {

            $MODEL->resultset('Content')->search({id => $id})->update(
                {   address => $_->streetAddress . ', ' . $_->city,
                    lat     => $_->lat,
                    lng     => $_->lng
                }
            );
        }
    }

    if ($self->param('venue')) {

        $content->update({venue => encode_string($self->param('venue'))});
    }

    if ($self->param('default_photo')) {

        @photos = split /\s+/, $content->photos;

        my $default = $self->param('default_photo');

        for (my $i = 0; $i <= scalar @photos; $i++) {

            undef $photos[$i] if $photos[$i] =~ m/^$default/i;
        }

        unshift @photos, $default;

        $content->update({photos => "@photos"});
    }

    if ($self->req->upload('photos')) {

        push @photos, process_photo($self->req->upload('photos'), $id);

        $content->update({photos => "@photos"})
          if scalar @photos >= 1;
    }

    $content->update({modified_datetime => DateTime->now});

    my $text =

      'Content updated. '
      . "<a href='/$id'>You can click here to view the Permalink page.</a>";

    return $self->redirect_to("/editor?mode=update&id=$id&message=$text");

};

any '/api/content/remove' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    my @content_photos = split /\s+/, $content->photos;

    unlink "public/$_" for @content_photos;

    $content->delete;

    my $text = "Content removed!";
    return $self->redirect_to("/dashboard?message=$text");

};

post '/api/contact/message' => sub {

    my $self = shift;

    if ((       $self->param('message')
            and ($self->param('name'))
            and ($self->param('email'))
            and ($self->param('subject'))
        )
      )
    {

        my $domain = app->config->{domain};
        my $title  = app->config->{title};

        my @results = google_local($self->param('city_state_zip'));

        for (@results) {

            my $message =
                "\n\nContact Message from $title...\n\n\tName: "
              . $self->param('name')
              . "\n\n\tEmail: "
              . $self->param('email')
              . "\n\n\tCity/State or Zip: " . ''
              . $_->city . ','
              . $_->region
              . "\n\n\tPhone: "
              . $self->param('phone')
              . "\n\nMessage: \n\n"
              . $self->param('message') . "\n\n";

            my %mail = (

                To      => "contact\@$domain",
                From    => "no-reply\@$domain",
                Subject => "$domain :: " . $self->param('subject'),
                Message => $message
            );

            sendmail(%mail) or die $Mail::Sendmail::error;

            my $text = 'Message successfully sent!';
            return $self->redirect_to("/contact?message=$text");
        }
    }
    else {

        my $text = 'Error sending message. Please try again!';
        return $self->redirect_to("/contact?message=$text");
    }

    return $self->redirect_to('contact');
};

post '/api/newsletter/message' => sub {

    my $self = shift;

    if ((       $self->param('city_state_zip')
            and ($self->param('name'))
            and ($self->param('email'))
        )
      )
    {

        my $domain = app->config->{domain};
        my $title  = app->config->{title};

        my @results = google_local($self->param('city_state_zip'));

        for (@results) {

            my $message =
                "\n\nNewsletter Sign-Up from $title...\n\n\tName: "
              . $self->param('name')
              . "\n\n\tAge: "
              . $self->param('age')
              . "\n\n\tGender: "
              . $self->param('gender')
              . "\n\n\tEmail: "
              . $self->param('email')
              . "\n\n\tCity/State or Zip: " . ''
              . $_->city . ','
              . $_->region . "\n\n";

            my %mail = (

                To      => "contact\@$domain",
                From    => "no-reply\@$domain",
                Subject => "$domain :: Newsletter Sign-Up!",
                Message => $message
            );

            sendmail(%mail) or die $Mail::Sendmail::error;

            my $text = 'Message successfully sent!';
            return $self->redirect_to("/newsletter?message=$text");
        }
    }
    else {

        my $text = 'Error sending message. Please try again!';
        return $self->redirect_to("/newsletter?message=$text");
    }

    return $self->redirect_to('newsletter');
};

post '/api/photo/remove' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my $photo_madness =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    my @photos = split /\s+/, $photo_madness->photos;

    my $path = $self->param('photo');

    for (my $i = 0; $i < scalar @photos; $i++) {

        if ($photos[$i] =~ m/^$path/x) {

            undef $photos[$i] and unlink "public/$path";
        }
    }

    $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->update({photos => "@photos"})
      if scalar @photos >= 1;

};

## After 5 Content Trending

post '/trending/:type' => [type => qr/\w+/] => sub {

    my $self = shift;

    if ($self->param('id')) {

        my $content =
          $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->single;

        given ($self->param('type')) {

            when ('views') {

                $content->update({views => $content->views + 1});
            }

            when ('clicks') {

                $content->update({clicks => $content->clicks + 1});
            }

            default {

                $content->close;
            }
        }
    }

    return;
};

## After 5 Dojo JSON Data Stores

get '/dojox/image/data.json' => sub {

    my $self = shift;

    my $json = Mojo::JSON->new;

    if ($self->param('id')) {

        my $gallery =
          $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->single;

        my @gallery;

        for (split /\s+/, $gallery->photos) {

            my %items = (

                'thumb' => "$_",
                'large' => "$_",
                'title' => $gallery->title,
                'link'  => ''                # I've disabled this temporarily.
            );

            push @gallery, \%items;
        }

        my $string = $json->encode({items => \@gallery});
        return $self->render(text => $string);
    }

};

### After 5 REST API

get '/api/rest/get/:amount/:sort/:results' =>
  [amount => qr/\w+/, sort => qr/\w+/, results => qr/\w+\.json/] => sub {

    my $self = shift;

    my $json = Mojo::JSON->new;

    my $dtf = $MODEL->storage->datetime_parser;
    my $dt_local;

    my ($types, $pages, $rows, @content, @results);

    $rows = $self->param('amount');

    if ($self->param('results')) {

        my $results = $self->param('results');

        if ($results =~ m/events.json/i) {

            $types = '%event%';
            $pages = '%events%';
        }
        elsif ($results =~ m/photos.json/i) {

            $types = 'gallery';
            $pages = '%photos%';
        }
        elsif ($results =~ m/articles.json/i) {

            $types = '%article%';
            $pages = '%articles%';
        }
        elsif ($results =~ m/style.json/i) {

            $types = '%article%';
            $pages = '%style%';
        }
        elsif ($results =~ m/jobs.json/i) {

            $types = '%career%';
            $pages = '%work%';
        }
    }

    given ($self->param('sort')) {

        when ('recent') {

            @content = $MODEL->resultset('Content')->search(
                {   types           => {like => '%article%'},
                    create_datetime => {
                        -between => [
                            $dtf->format_datetime(
                                DateTime->now->subtract(days => 30)
                            ),
                            $dtf->format_datetime(DateTime->now)
                        ]
                    }
                },
                {   page     => 1,
                    rows     => $rows,
                    order_by => 'create_datetime DESC'
                }
            )->all;
        }

        when ('trending') {

            @content = $MODEL->resultset('Content')->search(
                {   types => {like => "$types"},
                    pages => {like => "$pages"}
                },
                {page => 1, rows => $rows, order_by => 'id DESC'}
            )->all;

            order_by_trending(@content);
        }
    }

    for (@content) {

        my ($body_format, @prepared_photos);

        if ((   $self->param('strip_html')
                and ($self->param('strip_html') eq 'true')
            )
          )
        {
            $body_format = HTML::FormatText->format_string($_->body);
        }
        else {
            $body_format = Mojo::Util::html_escape($_->body);
        }

        for (split /\s+/, $_->photos) {

            push @prepared_photos,
              'http://' . app->config->{domain} . '' . $_;
        }

        my %items = (

            id                => $_->id,
            create_datetime   => $_->create_datetime,
            modified_datetime => $_->modified_datetime,
            author            => $_->author,
            title             => $_->title,
            types             => $_->types,
            tags              => $_->tags,
            cities            => $_->cities,
            interests         => $_->interests,
            pages             => $_->pages,
            photos            => @prepared_photos,
            videos            => $_->videos,
            body              => $body_format,
            start_datetime    => $_->start_datetime,
            stop_datetime     => $_->stop_datetime,
            venue             => $_->venue,
            address           => $_->address,
            lat               => $_->lat,
            lng               => $_->lng,
            position          => $_->position,
            link              => $_->link,
            views             => $_->views,
            clicks            => $_->clicks,

            permalink => 'http://' . app->config->{domain} . '/' . $_->id,

            gallery => 'http://'
              . app->config->{domain} . '/'
              . $_->id . '/1',
        );
        push @results, \%items;
    }

    if ((   $self->param('status_check')
            and ($self->param('status_check') eq 'true')
        )
      )
    {
        return $self->render(
            text => $json->encode({status => 'ok', results => \@results}));
    }
    else {
        return $self->render(text => $json->encode({results => \@results}));
    }

  };

### After 5 Tools

sub process_photo {

    my ($upload, $id) = @_;

    my (@new_photos, @existing_photos);

    if ($upload->filename =~ m/zip$/i) {

        my $temp = app->config->{temp};

        my $zip_file = $upload->filename;
        $upload->move_to("$temp/$zip_file");

        my $archive = Archive::Extract->new(archive => "$temp/$zip_file");

        if ($archive->is_zip) {

            my $ok = $archive->extract(to => "$temp/");

            for (@{$archive->files}) {

                unless (-d "$temp/$_") {

                    if ($_ =~ m/jpg|png|gif$/i) {

                        my $checksum = Mojo::Util::md5_sum($_);
                        my $path     = "/photos/$checksum.img";

                        move "$temp/$_", "public/$path"
                          and push @new_photos, $path;

                    }
                }
            }

            return @new_photos;
        }
    }
    elsif ($upload->filename =~ m/jpg|png|gif$/i) {

        my $checksum = Mojo::Util::md5_sum($upload->filename);
        my $path     = "/photos/$checksum.img";

        $upload->move_to('public' . $path);

        push @new_photos, $path;
        return @new_photos;
    }

    return;
}

sub google_local {

    REST::Google::Search->service(LOCAL);

    my $response = REST::Google::Search->new(q => shift);

    if ($response->responseStatus == 200) {

        my $data = $response->responseData;
        return $data->results;
    }

    return;
}

sub encode_string {

    return Encode::encode('ISO-8859-1', shift);
}

sub stock_photo {

    my $self = shift;

    my $photos = IO::Dir->new('public/stock/');

    my @random_stock;

    if (defined $photos) {

        while (defined($_ = $photos->read)) {

            push @random_stock, $_
              unless -d $_ or $_ =~ m/^\./g;
        }

        undef $photos;
    }

    my $stock_photo =
      '/stock/' . $random_stock[int(rand(scalar @random_stock))];

    return $stock_photo;
}

sub order_by_trending {

    my ($self, @query) = @_;
    my (%working, @results);

    for (@query) {

        if (defined $_->views and defined $_->clicks) {

            my $score = $_->clicks / $_->views;
            $working{$score} = $_;
        }
    }

    for (sort { $b <=> $a } keys %working) {
        push @results, $working{$_};
    }

    return \@results;
}

### After 5 Mojolicious Configuration

app->log->path(app->config->{hypnotoad}->{log_file})
  if app->mode('production');

app->secret('Something sticky in the basement.');
app->start();
