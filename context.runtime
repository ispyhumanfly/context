#!/usr/bin/env perl

use lib 'lib/';
use local::lib 'lib/perl5';

BEGIN {

    
}

use REST::Google::Search qw/ LOCAL /;
use Net::Google::FederatedLogin;
use DateTime::Format::SQLite;
use DateTime::Format::ISO8601;
use HTML::FormatText;
use Archive::Extract;
use Mail::Sendmail;
use File::Copy;
use File::Basename;
use Try::Tiny;
use IO::Dir;
use Encode;
use Redis;

#our $MODEL =
#  Context->connect('dbi:SQLite:context.db', {sqlite_unicode => 1});

use Mojolicious::Lite;
use Mojolicious::Plugin::Redis;
use Mojo::Util;
use Mojo::JSON;

plugin 'JSONConfig';

any '/' => sub {

    my $self = shift;
    
    my $redirect = app->config->{content}->{views}->{app->config->{content}->{views}->{enabled}[0]}->{url};
    return $self->redirect_to($redirect);
};

### Content Views

for my $view (@{app->config->{content}->{views}->{enabled}}) {
    if (exists app->config->{content}->{views}->{$view}) {

        ## Views
        
        get app->config->{content}->{views}->{$view}->{url} => sub {

            my $self = shift;

            #my $tags = join ',',
            #  @{app->config->{content}->{views}->{$view}->{tags}};

            #my @content = $MODEL->resultset('Content')->search(undef)->all;

            #$self->{'CONTENT'} = \@content;
            #$self->{'VIEW'} = $view;
            
            #$self->render(app->config->{content}->{views}->{$self->{VIEW}}->{template});
        };

        post app->config->{content}->{views}->{$view}->{url} => sub {
            my $self = shift;
        };

        put app->config->{content}->{views}->{$view}->{url} => sub {
            my $self = shift;
        };

        del app->config->{content}->{views}->{$view}->{url} => sub {
            my $self = shift;
        };
    }
}

### Context Permalink

get '/:id' => [id => qr/\d+/] => sub {

    my $self = shift;

    #eval {
    #    $self->{CONTENT} =
    #      $MODEL->resultset('Content')->search({id => $self->param('id')})
    #      ->single;
    #};
    #
    #if ($@) {
    #    $self->redirect_to('/');
    #}
    
    $self->render('permalink');

} => 'permalink';

### Context Authorization

get '/login' => sub {

    my $self = shift;

    return $self->redirect_to('dashboard') if $self->session('admin');

    if (app->config->{authorization}->{enabled}[0] eq 'google_apps') {

        my $domain = app->config->{authorization}->{google_apps}->{domain};

        my $claimed = $domain;

        my $google = Net::Google::FederatedLogin->new(
            claimed_id => $claimed,
            return_to  => "http://$domain/authorization"
        );
        my $auth_url = $google->get_auth_url();

        return $self->redirect_to($auth_url);
    }
    elsif (app->config->{authorization}->{enabled}[0] eq 'local_mode') {
        $self->redirect_to('/authorization');
    }

} => 'login';

any '/authorization' => sub {

    my $self = shift;

    if (app->config->{authorization}->{enabled}[0] eq 'google_apps') {

        my $domain = app->config->{domain};

        my $google = Net::Google::FederatedLogin->new(
            cgi_params => $self->req->params->to_hash,
            return_to  => "http://$domain/authorization"
        );

        my $id = $google->verify_auth();

        $self->session(admin => $id) if $id;
    }
    elsif (app->config->{authorization}->{enabled}[0] eq 'local_mode') {
        $self->session(admin => "Developer");
    }

    $self->redirect_to('dashboard');

};

get '/logout' => sub {

    my $self = shift;

    $self->session(expires => 1)
      and return $self->redirect_to('/');

} => 'logout';

### Context Start

app->start();
